import pandas as pd, numpy, scipy
import sklearn, sklearn.preprocessing, sklearn.decomposition
import matplotlib, matplotlib.pyplot

matplotlib.rcParams.update({'font.size':20, 
                            'font.family':'sans-serif', 
                            'xtick.labelsize':16, 
                            'ytick.labelsize':16, 
                            'figure.figsize':(16*(2/3), 9*(2/3)), 
                            'axes.labelsize':20
                           }) #maybe change the style in the future

input_file = 'C:/Users/79516/Downloads/DESeq2_TPM_values.tsv'

expression = pd.read_csv(input_file, sep='\t', index_col=0)
expression = expression.filter(regex='^073', axis=1)

print(expression.shape)
expression


substantial_expression = expression[expression.max(axis=1) >= 2]
high_expression = expression[expression.max(axis=1) >= 100] 

print(substantial_expression.shape)
print(high_expression.shape) #forming axis?


transpose = substantial_expression.transpose()
pca_substantial_expression = numpy.log2(transpose + 1)

transpose = high_expression.transpose()
pca_high_expression = numpy.log2(transpose + 1) #axis transporated?


#this part is for the substantial expression

scaled_data = sklearn.preprocessing.StandardScaler().fit_transform(pca_substantial_expression)
model = sklearn.decomposition.PCA(n_components=2)
new = model.fit_transform(scaled_data)
explained = model.explained_variance_ratio_
print(explained) #where the output goes to


log2_tpm_PO = numpy.log2(expression + 1)
log2_tpm_PO.head()


import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

meta = pd.read_csv("C:/Users/79516/Downloads/metadata.tsv", sep="\t")
meta = meta[meta["run"] == 73]

new_clean, mask = remove_outliers_iqr(new)
clean_indices = np.where(mask)[0]

meta_clean = meta.iloc[clean_indices].reset_index(drop=True)
treatment_map = {
    "zero": "Control",
    "mix": "Mix",
    "ilo_only": "Ilo",
    "mix_plus_ilo": "Mix + Ilo"
}

meta_clean["treatment"] = meta_clean["treatment"].map(treatment_map)

treatments = meta_clean["treatment"].unique()
colors = dict(zip(treatments, plt.cm.tab10.colors[:len(treatments)]))

plt.figure(figsize=(8,6))
for treatment in treatments:
    idx = meta_clean[meta_clean["treatment"] == treatment].index
    plt.scatter(
        new_clean[idx, 0],
        new_clean[idx, 1],
        s=200, alpha=0.7, edgecolors="k",
        color=colors[treatment],
        label=treatment
    )

for sid, (x, y) in zip(meta_clean["sampleID"], new_clean[:, :2]):
    label = sid.split("_")[1]  
    plt.annotate(label, (x, y), xytext=(5, 5), textcoords='offset points',
                 fontsize=7, alpha=0.7)


plt.xlabel('PC1 (exp. var.: {}%)'.format(int(explained[0]*100)))
plt.ylabel('PC2 (exp. var.: {}%)'.format(int(explained[1]*100)))
plt.grid(alpha=0.5, ls=':')
plt.legend(title="Treatment", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.show()


found_max = 15.1
number_of_bins = int(found_max*10)
print(number_of_bins)

absolute_max = 0
working_samples = log2_tpm_PO.columns.to_list()

most_likely_expressions = []
all_hats = []
for i in range(len(working_samples)):

    sample = working_samples[i]

    the_color = 'black'; the_alpha = 1/10
    
    log2TPM = log2_tpm_PO.loc[:, sample]
    if max(log2TPM) > absolute_max:
        absolute_max = max(log2TPM)
                
    hist, bin_edges = numpy.histogram(log2TPM, bins=number_of_bins, range=(0, found_max))
    half_bin = (bin_edges[1] - bin_edges[0])/2
    x = bin_edges + half_bin
    x = x[:-1]
  
    plotting_x = x[5:-20]
    plotting_hist = hist[5:-20]
    #print(plotting_x)
    
    #matplotlib.pyplot.plot(plotting_x, plotting_hist, '.', alpha=1/100, mec='none', color=the_color)
    yhat = scipy.signal.savgol_filter(plotting_hist, 51, 3)

    matplotlib.pyplot.plot(plotting_x, yhat, '-', lw=2, alpha=the_alpha, color=the_color)
    
matplotlib.pyplot.xlim([numpy.min(plotting_x)-0.25, numpy.max(plotting_x)+0.25])
#matplotlib.pyplot.ylim([0, 400])

matplotlib.pyplot.xlabel('log2 (TPM+1)')
matplotlib.pyplot.ylabel('Gene count')
matplotlib.pyplot.grid(ls=':')

matplotlib.pyplot.tight_layout()

print(absolute_max)
